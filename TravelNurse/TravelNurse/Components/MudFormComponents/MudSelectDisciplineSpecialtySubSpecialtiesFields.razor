@using System.Linq.Expressions
@using Core.Utils
@using TravelNurse.Components.Common.Enums
@using TravelNurse.Components.Common.Services
@using TravelNurseServer.Helpers
@using TravelNurseServer.Services
@typeparam T
@inject IDisciplineService DisciplineService
@inject IDataFetchService DataFetchService
@inject ISnackbar Snackbar

@if (IsFormDependencyLoading != null && IsFormDependencyLoading == true)
{
    <MudItem xs="@Xs" md="@Md">
        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="100%" Height="30px" />
    </MudItem>
}
else
{
    <MudItem xs="@Xs" md="@Md">
        <MudSelect T="int"
                   Value="DisciplineValue"
                   ValueChanged="OnDisciplineValueChanged"
                   For="DisciplineFor"
                   Immediate="true"
                   Label="Discipline"
                   Disabled="@Disabled">
            @foreach (var option in DisciplineOptions)
            {
                <MudSelectItem T="int" Value="option.Id">@option.Name</MudSelectItem>
            }
        </MudSelect>
    </MudItem>

    <MudItem xs="@Xs" md="@Md">
        <MudSelect T="int"
                   Value="SpecialtyValue"
                   ValueChanged="OnSpecialtyValueChanged"
                   For="SpecialtyFor"
                   Immediate="true"
                   Label="Specialty"
        >
            @foreach (var option in _specialties)
            {
                <MudSelectItem T="int" Value="option.Id">@option.Name</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    
    <MudItem xs="@Xs" md="@Md">
        <MudSelect T="string"
                   MultiSelection="true"
                   AnchorOrigin="Origin.BottomCenter"
                   SelectedValues="@(string.IsNullOrWhiteSpace(DisplaySubSpecialty)
                                       ? new List<string>()
                                       : DisplaySubSpecialty.Split(',').Where(x => !string.IsNullOrWhiteSpace(x)).ToList())"
                   SelectedValuesChanged="@(x => HandleSelectedValuesChanged(x))"
                   For="DisplaySubSpecialtyFor"
                   Immediate="true"
                   Label="Sub-Specialties"
                   Disabled="_shouldDisableSubSpecialty"
        >
            @foreach (var option in _subSpecialties)
            {
                <MudSelectItem T="string" Value="@option.Name">@option.Name</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
}


@code {
    
    // Discipline Section
    [Parameter] public List<SelectOption> DisciplineOptions { get; set; } = new();

    [Parameter] public int DisciplineValue { get; set; }

    [Parameter] public EventCallback<int> DisciplineValueChanged { get; set; }

    [Parameter] public Expression<Func<int>>? DisciplineFor { get; set; }

    // Specialty Section

    [Parameter] public int SpecialtyValue { get; set; }

    [Parameter] public EventCallback<int> SpecialtyValueChanged { get; set; }

    [Parameter] public Expression<Func<int>>? SpecialtyFor { get; set; }
    
    // Sub specialty section

    [Parameter] public string DisplaySubSpecialty { get; set; } = string.Empty;
    
    [Parameter] public EventCallback<string> DisplaySubSpecialtyChanged { get; set; }
    
    [Parameter] public Expression<Func<string>>? DisplaySubSpecialtyFor { get; set; }
    
    [Parameter] public bool Disabled { get; set; } = Constants.DefaultBoolean;

    [Parameter] public bool? IsOptionalField { get; set; } = Constants.DefaultBoolean;
    
    [Parameter] public bool? IsFormDependencyLoading { get; set; } = Constants.DefaultBoolean;

    [Parameter] public int Xs { get; set; } = 6;

    [Parameter] public int Md { get; set; } = 6;
    
    [Parameter] public EventCallback<List<SelectOption>> UpdateSelectedSubSpecialties { get; set; }

    private bool _shouldDisableSubSpecialty = true;


    private List<SelectOption> _specialties = new()
    {
        new SelectOption
        {
            Id = -1, Name = "Please select an option", Selected = false
        }
    };
    
    private List<SelectOption> _subSpecialties = new()
    {
        new SelectOption
        {
            Id = -1, Name = "Please select an option", Selected = false
        }
    };

    private async Task OnDisciplineValueChanged(int disciplineId)
    {
        _specialties = await DataFetchService.GetLocumSelectOptions(DataFetchEnum.Specialties, disciplineId, null, true);
        await DisciplineValueChanged.InvokeAsync(disciplineId);
        await SpecialtyValueChanged.InvokeAsync(-1);
        await DisplaySubSpecialtyChanged.InvokeAsync("");
        await UpdateSelectedSubSpecialties.InvokeAsync(new List<SelectOption>());
        _shouldDisableSubSpecialty = true;
        StateHasChanged();
    }
    
    private async Task OnSpecialtyValueChanged(int specialtyId)
    {
        _subSpecialties = await DataFetchService.GetLocumSelectOptions(DataFetchEnum.SubSpecialties, specialtyId, null, false);
        await SpecialtyValueChanged.InvokeAsync(specialtyId);
        await DisplaySubSpecialtyChanged.InvokeAsync("");
        await UpdateSelectedSubSpecialties.InvokeAsync(new List<SelectOption>());
        _shouldDisableSubSpecialty = false;
        StateHasChanged();
    }
    
    private async void HandleSelectedValuesChanged(IEnumerable<string?>? changedValues)
    {
        DisplaySubSpecialty = string.Join(",", changedValues ?? new List<string?>());
        var idList = new List<int>();
        
        var selectedSubSpecialties = new List<SelectOption>();

        if (changedValues != null)
            foreach (var selectedOption in changedValues.ToList())
            {
                var option = _subSpecialties.Find(x => x.Name == selectedOption);
                if (option != null)
                {
                    idList.Add(option.Id);

                    if (selectedSubSpecialties != null)
                    {
                        selectedSubSpecialties.Add(option);
                    }
                }
            }

        await DisplaySubSpecialtyChanged.InvokeAsync(DisplaySubSpecialty);
        await UpdateSelectedSubSpecialties.InvokeAsync(selectedSubSpecialties);
    }

}