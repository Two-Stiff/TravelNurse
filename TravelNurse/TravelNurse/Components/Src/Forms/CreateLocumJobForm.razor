@using AutoMapper
@using TravelNurse.Components.Common.Enums
@using TravelNurse.Components.Common.Services
@using TravelNurse.Components.Common.Utils
@using TravelNurseServer.Enums
@using TravelNurseServer.Helpers
@using TravelNurseServer.Services
@using TravelNurse.Components.MudFormComponents
@using TravelNurseServer.Dtos.Jobs.Add
@inject ISnackbar SnackBar
@inject IFacilityService FacilityService
@inject IJobService JobService
@inject IDataFetchService DataFetchService
@inject IMapper Mapper

<MudCard
    Style="padding: 1rem;"
    >
    <MudForm
    Model="@_addJobDtoFormModel"
    @ref="@_form"
    ValidationDelay="0"
    >
        <MudCardContent>
            <MudGrid>

                <MudItem xs="12" md="12">
                    <MudText Typo="Typo.h5">Job information</MudText>
                </MudItem>
                <MudItemTextField T="string"
                Value="@_addJobDtoFormModel.JobTitle"
                ValueChanged="@(v => _addJobDtoFormModel.JobTitle = v)"
                For="@(() => _addJobDtoFormModel.JobTitle)"
                Label="Job Title"
                IsFormDependencyLoading="_isLoadingAllDependencies"
                Xs="6" Md="4"/>

                <MudItemTextField T="string"
                Value="@_addJobDtoFormModel.UniqueNotes"
                ValueChanged="@(v => _addJobDtoFormModel.UniqueNotes = v)"
                For="@(() => _addJobDtoFormModel.UniqueNotes)"
                Label="Unique Note"
                IsFormDependencyLoading="_isLoadingAllDependencies"
                Xs="6" Md="4"/>

                <MudItemTextField T="int?"
                Value="@_addJobDtoFormModel.ContractLengthWeeks"
                ValueChanged="@(v => _addJobDtoFormModel.ContractLengthWeeks = v)"
                For="@(() => _addJobDtoFormModel.ContractLengthWeeks)"
                Label="Contract Length Weeks"
                IsFormDependencyLoading="_isLoadingAllDependencies"
                Xs="6" Md="4"/>

                <MudItemDatePickerField
                T="DateTime?"
                Value="@_addJobDtoFormModel.StartDate"
                ValueChanged="@(v => _addJobDtoFormModel.StartDate = v)"
                For="@(() => _addJobDtoFormModel.StartDate)"
                Label="Start Date"
                IsFormDependencyLoading="_isLoadingAllDependencies"
                Xs="6" Md="4"/>

                <MudItemDatePickerField
                T="DateTime?"
                Value="@_addJobDtoFormModel.ExpiresOn"
                ValueChanged="@(v => _addJobDtoFormModel.ExpiresOn = v)"
                For="@(() => _addJobDtoFormModel.ExpiresOn)"
                Label="Expires On Date"
                IsFormDependencyLoading="_isLoadingAllDependencies"
                Xs="6" Md="4"/>
                
                @* Select option section *@
                
                <MudItemSelectField
                T="int"
                Value="@_addJobDtoFormModel.PlatformId"
                ValueChanged="@(v => _addJobDtoFormModel.PlatformId = v)"
                For="@(() => _addJobDtoFormModel.PlatformId)"
                Options="_platforms"
                Label="Platform"
                IsFormDependencyLoading="_isLoadingAllDependencies"
                Xs="6" Md="4"/>

                <MudItemAutoCompleteField
                T="string"
                Options="_facilityList"
                Value="@_addJobDtoFormModel.FacilityName"
                ValueChanged="@(v => _addJobDtoFormModel.FacilityName = v)"
                For="@(() => _addJobDtoFormModel.FacilityName)"
                FormValue="@_addJobDtoFormModel.FacilityId"
                Label="Facility"
                SearchMethod="AutoCompleteSearch"
                OnValueSelected="OnAutoCompleteSelectValue"
                FetchType="DataFetchEnum.Facilities"
                IsFormDependencyLoading="_isLoadingAllDependencies"
                Xs="12" Md="12"
                />

                <MudSelectDisciplineSpecialtySubSpecialtiesFields
                T="int"
                DisciplineValue="@_addJobDtoFormModel.DisciplineId"
                DisciplineValueChanged="@(v => _addJobDtoFormModel.DisciplineId = v)"
                DisciplineFor="@(() => _addJobDtoFormModel.DisciplineId)"
                DisciplineOptions="_disciplines"

                SpecialtyValue="@_addJobDtoFormModel.SpecialtyId"
                SpecialtyValueChanged="@(v => _addJobDtoFormModel.SpecialtyId = v)"
                SpecialtyFor="@(() => _addJobDtoFormModel.SpecialtyId)"

                DisplaySubSpecialty="@_addJobDtoFormModel.SubSpecialtyNames"
                DisplaySubSpecialtyChanged="@(v => _addJobDtoFormModel.SubSpecialtyNames = v)"
                DisplaySubSpecialtyFor="@(() => _addJobDtoFormModel.SubSpecialtyNames)"

                UpdateSelectedSubSpecialties="@(v => _addJobDtoFormModel.SelectedSubSpecialties = v)"
                IsFormDependencyLoading="_isLoadingAllDependencies"
                Xs="6" Md="4"/>


                <MudItem xs="12" md="12">
                    @if (_addJobDtoFormModel.SelectedSubSpecialties.Count > 1)
                    {
                        <MudText Typo="Typo.body1">Please select the required Sub-Specialties: </MudText>
                    }
                </MudItem>

                <MudItem xs="12" md="12">
                    <div Style="display: flex; justify-content: flex-start;">
                        @foreach (var sub in _addJobDtoFormModel.SelectedSubSpecialties)
                        {
                            <MudSwitch @bind-Value="sub.Selected"
                            Label="@sub.Name"/>
                        }
                    </div>
                </MudItem>

                <MudItemSelectField
                T="int"
                Value="@_addJobDtoFormModel.JobType"
                ValueChanged="@(v => _addJobDtoFormModel.JobType = v)"
                For="@(() => _addJobDtoFormModel.JobType)"
                Options="_jobType"
                Label="JobTypes"
                IsFormDependencyLoading="_isLoadingAllDependencies"
                Xs="6" Md="4"/>
                
                @* Check box section *@
                <MudGrid Style="margin-top: 2rem;">

                    <MudItemCheckBoxField
                    T="bool?"
                    Value="@_addJobDtoFormModel.AllowsAutoposterUpdate"
                    ValueChanged="@(v => _addJobDtoFormModel.AllowsAutoposterUpdate = v)"
                    For="@(() => _addJobDtoFormModel.AllowsAutoposterUpdate)"
                    MudBlazorColor="Color.Secondary"
                    Placement="Placement.Bottom"
                    Label="Allow AutoPoster Update"
                    Xs="5"
                    Md="3"
                    IsFormDependencyLoading="_isLoadingAllDependencies"
                    Size="Size.Small"/>

                    <MudItemCheckBoxField
                    T="bool?"
                    Value="@_addJobDtoFormModel.HousingProvided"
                    ValueChanged="@(v => _addJobDtoFormModel.HousingProvided = v)"
                    For="@(() => _addJobDtoFormModel.HousingProvided)"
                    MudBlazorColor="Color.Secondary"
                    Placement="Placement.Bottom"
                    Label="Housing Provided"
                    Xs="5"
                    Md="3"
                    IsFormDependencyLoading="_isLoadingAllDependencies"
                    Size="Size.Small"/>

                    <MudItemCheckBoxField
                    T="bool?"
                    Value="@_addJobDtoFormModel.AutoPosted"
                    ValueChanged="@(v => _addJobDtoFormModel.AutoPosted = v)"
                    For="@(() => _addJobDtoFormModel.AutoPosted)"
                    MudBlazorColor="Color.Secondary"
                    Placement="Placement.Bottom"
                    Label="Auto Posted"
                    Xs="5"
                    Md="3"
                    IsFormDependencyLoading="_isLoadingAllDependencies"
                    Size="Size.Small"/>

                    <MudItemCheckBoxField
                    T="bool?"
                    Value="@_addJobDtoFormModel.HideExternally"
                    ValueChanged="@(v => _addJobDtoFormModel.HideExternally = v)"
                    For="@(() => _addJobDtoFormModel.HideExternally)"
                    MudBlazorColor="Color.Secondary"
                    Placement="Placement.Bottom"
                    Label="Hide Externally"
                    Size="Size.Small"
                    Xs="5"
                    Md="3"
                    IsFormDependencyLoading="_isLoadingAllDependencies"/>
                </MudGrid>
                
            </MudGrid>

            <MudStack
                Row
                Justify="Justify.Center"
                AlignItems="AlignItems.Center"
                Style="margin-top: 1rem; padding: 1rem;">
                @if (Id != null && _existingJob)
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                               OnClick="@(async () => await UpdateJob())">
                        Update Job
                    </MudButton>
                }
                else
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Primary"
                               OnClick="@(async () => await AddJob())">
                        Add Job
                    </MudButton>
                }
                
            </MudStack>

        </MudCardContent>
    </MudForm>
</MudCard>

@code {

    [SupplyParameterFromQuery]
    string? Id { get; set; }
    
    MudForm _form = new MudForm();

    // Initial form values can be set here
    AddJobDto _addJobDtoFormModel = new();
    


    // States
    private List<SelectOption> _platforms = new();
    private List<SelectOption> _disciplines = new();
    private List<SelectOption> _jobType = new();

    private List<SelectOption> _facilityList = new();
    
    // This will dictate whether the form components should show skeleton loaders
    private bool _isLoadingAllDependencies = true;

    private bool _existingJob = false;
    private bool _firstSet = true;
    // CreateLocumJobFormFluentValidator _createLocumJobValidator = new();

    private async Task SetFormInitialValue()
    {
        try
        {
            if (Id != null)
            {
                var job = await JobService.GetJob(int.Parse(Id));

                _addJobDtoFormModel = Mapper.Map<AddJobDto>(job);

                if (job.FacilityId.HasValue && job.FacilityId != null)
                {
                    var facility = await FacilityService.GetFacility(job.FacilityId.Value);
                    _addJobDtoFormModel.FacilityName = $"{facility?.Id} - {facility?.Name}";
                }

                _existingJob = true;
            }
        }
        catch (Exception e)
        {
            SnackBar.Add("Job Not Found", Severity.Error);
            _existingJob = false;
        }
    }
    
    // Call the base with an empty ParameterView as we've already set the parameters
    // This will run the normal lifecycle events
    public override async Task SetParametersAsync(ParameterView parameters)
    {
        // This will run before OnInitialized gets kicked off and way before the component renders
        parameters.SetParameterProperties(this);
        
        if (_firstSet)
        {
            await SetFormInitialValue();
        }
        _firstSet = false;
        await base.SetParametersAsync(ParameterView.Empty);
    }

    protected override void OnInitialized()
    {
        _jobType = SelectOptionHelper.ConvertEnumToSelectOptions<JobType>();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _disciplines = await DataFetchService.GetLocumSelectOptions(DataFetchEnum.Disciplines, null, null, true);
            _facilityList = await DataFetchService.GetLocumSelectOptions(DataFetchEnum.Facilities, null, null, false);
            _platforms = await DataFetchService.GetLocumSelectOptions(DataFetchEnum.Platforms, null, null, true);

            _isLoadingAllDependencies = false;
            StateHasChanged();
        }
    }

    private async Task AddJob()
    {
        try
        {
            await _form.Validate();
            if (_form.IsValid)
            {
                await JobService.AddJob(_addJobDtoFormModel);

                SnackBar.Add("Job Added!", Severity.Success);
                await _form.ResetAsync();
            }
        }
        catch (Exception e)
        {
            SnackBar.Add(e.Message, Severity.Error);
        }
    }

    private async Task UpdateJob()
    {
        try
        {
            await _form.Validate();
            if (_form.IsValid)
            {
                await JobService.UpdateJob(int.Parse(Id!), _addJobDtoFormModel);
            
                SnackBar.Add("Job Updated!", Severity.Success);
            }
        }
        catch (Exception e)
        {
            SnackBar.Add(e.Message, Severity.Error);
        }
    }

    private async Task<IEnumerable<string>> AutoCompleteSearch(
        string value,
        DataFetchEnum type,
        CancellationToken token)
    {
        await Task.Delay(500, token);

        var newList = await DataFetchService.GetLocumSelectOptions(type, null, value, false);

        if (string.IsNullOrEmpty(value))
            return newList.Select(x => x.Id == -1 ? x.Name : $"{x.Id} - {x.Name}").ToList();

        return newList.Where(x => $"{x.Id} {x.Name}".Contains(value, StringComparison.InvariantCultureIgnoreCase))
            .Select(x => x.Id == -1 ? x.Name : $"{x.Id} - {x.Name}");
    }

    private void OnAutoCompleteSelectValue(string value, DataFetchEnum type)
    {
        var sanitizedValue = SelectOptionHelper.StripCharsIfContainsDigits(value);
        switch (type)
        {
            case DataFetchEnum.Facilities:
                _addJobDtoFormModel.FacilityId = sanitizedValue;
                break;
        }
    }

}