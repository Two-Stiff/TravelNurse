// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TravelNurseServer.Data;

#nullable disable

namespace TravelNurseServer.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250813174838_Job_Table_Platform_Update")]
    partial class Job_Table_Platform_Update
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TravelNurseServer.Entities.Common.Discipline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<bool>("IsForProvider")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Disciplines");
                });

            modelBuilder.Entity("TravelNurseServer.Entities.Common.DisciplineSpecialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DisciplineId")
                        .HasColumnType("integer");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("Id");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("DisciplineSpecialties");
                });

            modelBuilder.Entity("TravelNurseServer.Entities.Common.Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AcceptsTravelers")
                        .HasColumnType("boolean");

                    b.Property<bool>("AutoOffer")
                        .HasColumnType("boolean");

                    b.Property<int>("BedSize")
                        .HasColumnType("integer");

                    b.Property<string>("BillingName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("DoNotRehireReason")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsAdvancedPractice")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastNoteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastWorkOrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Latitude")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("Longitude")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("MailingAddress")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("MailingCity")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int?>("MailingStateId")
                        .HasColumnType("integer");

                    b.Property<string>("MailingZipCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("PayrollBillingNote")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("PermanentNote")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .HasColumnType("character varying(8000)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("StateId")
                        .HasColumnType("integer");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("SupplementalNursingOverride")
                        .HasColumnType("boolean");

                    b.Property<string>("WebsiteLink")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("MailingStateId");

                    b.HasIndex("StateId");

                    b.ToTable("Facilities");
                });

            modelBuilder.Entity("TravelNurseServer.Entities.Common.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("TravelNurseServer.Entities.Common.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("States");
                });

            modelBuilder.Entity("TravelNurseServer.Entities.Common.SubSpecialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("HasFellowShip")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("SubSpecialties");
                });

            modelBuilder.Entity("TravelNurseServer.Entities.Jobs.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowsAutoposterUpdate")
                        .HasColumnType("boolean");

                    b.Property<bool>("AutoPosted")
                        .HasColumnType("boolean");

                    b.Property<int>("ContractLengthWeeks")
                        .HasColumnType("integer");

                    b.Property<int?>("DisciplineId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ExpiresOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("FacilityId")
                        .HasColumnType("integer");

                    b.Property<bool>("HideCity")
                        .HasColumnType("boolean");

                    b.Property<bool>("HideExternally")
                        .HasColumnType("boolean");

                    b.Property<bool>("HousingProvided")
                        .HasColumnType("boolean");

                    b.Property<int?>("JobStatus")
                        .HasColumnType("integer");

                    b.Property<decimal>("JobStrength")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int?>("JobType")
                        .HasColumnType("integer");

                    b.Property<int?>("PlatformId")
                        .HasMaxLength(100)
                        .HasColumnType("integer");

                    b.Property<DateTime>("RepostedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Requirements")
                        .HasMaxLength(8000)
                        .HasColumnType("character varying(8000)");

                    b.Property<int?>("SpecialtyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UniqueNotes")
                        .HasMaxLength(8000)
                        .HasColumnType("character varying(8000)");

                    b.HasKey("Id");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("FacilityId");

                    b.HasIndex("Id");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("TravelNurseServer.Entities.Jobs.JobSubSpecialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<int>("JobId")
                        .HasColumnType("integer");

                    b.Property<int>("SubSpecialtyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("JobId");

                    b.ToTable("JobSubSpecialties");
                });

            modelBuilder.Entity("TravelNurseServer.Entities.Platforms.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("TravelNurseServer.Entities.Providers.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AlternateEmail")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("AlternativePhoneNumber")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("AvailabilityDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DisciplineId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("ForceNextLogout")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAlternativePhoneNumberInService")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrimaryPhoneNumberInService")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPriority")
                        .HasColumnType("boolean");

                    b.Property<string>("LastFourSsn")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int?>("LastRecruiterId")
                        .HasColumnType("integer");

                    b.Property<string>("MaidenName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("PaycomEeCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("PreferredFirstName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("PrimaryPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("ReferralDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReferredBy")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("SensitiveDataModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Ssn")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("StateId")
                        .HasColumnType("integer");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("TemporaryCity")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("TemporaryStateId")
                        .HasColumnType("integer");

                    b.Property<string>("TemporaryStreetAddress")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("TemporaryZipCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("TravelerId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("Id");

                    b.HasIndex("StateId");

                    b.HasIndex("TemporaryStateId");

                    b.HasIndex("FirstName", "LastName");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("TravelNurseServer.Entities.Common.DisciplineSpecialty", b =>
                {
                    b.HasOne("TravelNurseServer.Entities.Common.Discipline", "Discipline")
                        .WithMany()
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TravelNurseServer.Entities.Common.Specialty", "Specialty")
                        .WithMany("DisciplineSpecialties")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discipline");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("TravelNurseServer.Entities.Common.Facility", b =>
                {
                    b.HasOne("TravelNurseServer.Entities.Common.State", "MailingState")
                        .WithMany()
                        .HasForeignKey("MailingStateId");

                    b.HasOne("TravelNurseServer.Entities.Common.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("MailingState");

                    b.Navigation("State");
                });

            modelBuilder.Entity("TravelNurseServer.Entities.Common.SubSpecialty", b =>
                {
                    b.HasOne("TravelNurseServer.Entities.Common.Specialty", "Specialty")
                        .WithMany("SubSpecialties")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("TravelNurseServer.Entities.Jobs.Job", b =>
                {
                    b.HasOne("TravelNurseServer.Entities.Common.Discipline", "Discipline")
                        .WithMany()
                        .HasForeignKey("DisciplineId");

                    b.HasOne("TravelNurseServer.Entities.Common.Facility", "Facility")
                        .WithMany("Jobs")
                        .HasForeignKey("FacilityId");

                    b.Navigation("Discipline");

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("TravelNurseServer.Entities.Jobs.JobSubSpecialty", b =>
                {
                    b.HasOne("TravelNurseServer.Entities.Jobs.Job", null)
                        .WithMany("JobSubSpecialties")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TravelNurseServer.Entities.Providers.Provider", b =>
                {
                    b.HasOne("TravelNurseServer.Entities.Common.Discipline", "Discipline")
                        .WithMany()
                        .HasForeignKey("DisciplineId");

                    b.HasOne("TravelNurseServer.Entities.Common.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.HasOne("TravelNurseServer.Entities.Common.State", "TemporaryState")
                        .WithMany()
                        .HasForeignKey("TemporaryStateId");

                    b.Navigation("Discipline");

                    b.Navigation("State");

                    b.Navigation("TemporaryState");
                });

            modelBuilder.Entity("TravelNurseServer.Entities.Common.Facility", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("TravelNurseServer.Entities.Common.Specialty", b =>
                {
                    b.Navigation("DisciplineSpecialties");

                    b.Navigation("SubSpecialties");
                });

            modelBuilder.Entity("TravelNurseServer.Entities.Jobs.Job", b =>
                {
                    b.Navigation("JobSubSpecialties");
                });
#pragma warning restore 612, 618
        }
    }
}
